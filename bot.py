#import time
#time.sleep(10) 
# –∂–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
import threading
import random
import psycopg2
from psycopg2.extras import RealDictCursor
from flask import Flask
import telebot
from telebot import types
import logging
import os

# =======================
# üîß –ù–ê–°–¢–†–û–ô–ö–ò
# =======================

TOKEN = os.getenv('BOT_TOKEN')
if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Environment Variables.")

DATABASE_URL = os.getenv('DATABASE_URL')
if not DATABASE_URL:
    raise ValueError("‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Environment Variables.")

bot = telebot.TeleBot(TOKEN)

# =======================
# üóÉÔ∏è –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•
# =======================

def init_db():
    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id BIGINT PRIMARY KEY,
            name TEXT,
            best_score INTEGER DEFAULT 0
        )
    ''')

    conn.commit()
    cursor.close()
    conn.close()

# =======================
# üíæ –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô
# =======================

def save_user(user_id, name):
    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO users (user_id, name, best_score)
        VALUES (%s, %s, COALESCE((SELECT best_score FROM users WHERE user_id = %s), 0))
        ON CONFLICT (user_id) DO UPDATE
        SET name = EXCLUDED.name
    ''', (user_id, name, user_id))
    conn.commit()
    cursor.close()
    conn.close()

def update_score(user_id, attempts):
    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    cursor = conn.cursor()
    cursor.execute('SELECT best_score FROM users WHERE user_id = %s', (user_id,))
    result = cursor.fetchone()
    current_best = result[0] if result and result[0] > 0 else None

    if not current_best or attempts < current_best:
        cursor.execute('UPDATE users SET best_score = %s WHERE user_id = %s', (attempts, user_id))

    conn.commit()
    cursor.close()
    conn.close()

def get_user_score(user_id):
    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    cursor = conn.cursor()
    cursor.execute('SELECT best_score FROM users WHERE user_id = %s', (user_id,))
    result = cursor.fetchone()
    cursor.close()
    conn.close()
    return result[0] if result else None

def get_top_players(limit=10):
    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    cursor.execute('''
        SELECT name, best_score
        FROM users
        WHERE best_score > 0
        ORDER BY best_score ASC
        LIMIT %s
    ''', (limit,))
    results = cursor.fetchall()
    cursor.close()
    conn.close()
    return results

# =======================
# ü§ñ –õ–û–ì–ò–ö–ê –ë–û–¢–ê
# =======================

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    name = message.from_user.first_name
    save_user(user_id, name)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn1 = types.KeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
    btn2 = types.KeyboardButton("üèÜ –ú–æ–π —Å—á—ë—Ç")
    btn3 = types.KeyboardButton("üèÖ –¢–æ–ø-10")
    markup.add(btn1, btn2, btn3)

    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø –∑–∞–≥–∞–¥–∞—é —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100 ‚Äî –ø–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!\n–ñ–º–∏ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'.",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == "üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
def start_game(message):
    user_id = message.from_user.id
    bot.current_number = random.randint(1, 100)
    bot.attempts = 0
    bot.send_message(message.chat.id, "–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ö–∞–∫–æ–µ —á–∏—Å–ª–æ?")
    bot.register_next_step_handler(message, guess_number)

def guess_number(message):
    user_id = message.from_user.id
    try:
        guess = int(message.text)
    except ValueError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ!")
        bot.register_next_step_handler(message, guess_number)
        return

    bot.attempts += 1

    if guess < bot.current_number:
        bot.reply_to(message, "–ë–æ–ª—å—à–µ! üìà")
        bot.register_next_step_handler(message, guess_number)
    elif guess > bot.current_number:
        bot.reply_to(message, "–ú–µ–Ω—å—à–µ! üìâ")
        bot.register_next_step_handler(message, guess_number)
    else:
        bot.reply_to(message, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª –∑–∞ {bot.attempts} –ø–æ–ø—ã—Ç–æ–∫!")
        update_score(user_id, bot.attempts)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        btn1 = types.KeyboardButton("üéÆ –°—ã–≥—Ä–∞—Ç—å –µ—â—ë")
        btn2 = types.KeyboardButton("üèÜ –ú–æ–π —Å—á—ë—Ç")
        btn3 = types.KeyboardButton("üèÖ –¢–æ–ø-10")
        markup.add(btn1, btn2, btn3)

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üèÜ –ú–æ–π —Å—á—ë—Ç")
def show_score(message):
    user_id = message.from_user.id
    score = get_user_score(user_id)

    if score and score > 0:
        bot.reply_to(message, f"üèÜ –¢–≤–æ–π –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –ø–æ–ø—ã—Ç–æ–∫")
    else:
        bot.reply_to(message, "–¢—ã –µ—â—ë –Ω–µ —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ. –ù–∞–∂–º–∏ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'!")

@bot.message_handler(func=lambda message: message.text == "üéÆ –°—ã–≥—Ä–∞—Ç—å –µ—â—ë")
def play_again(message):
    start_game(message)

@bot.message_handler(commands=['top'])
@bot.message_handler(func=lambda message: message.text == "üèÖ –¢–æ–ø-10")
def show_top_players(message):
    results = get_top_players(10)

    if not results:
        bot.reply_to(message, "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ—Ä–¥–æ–≤. –°—ã–≥—Ä–∞–π –∏ —É—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤–æ–π!")
        return

    text = "üèÜ *–¢–û–ü-10 –õ–£–ß–®–ò–• –ò–ì–†–û–ö–û–í*\n\n"
    for i, row in enumerate(results, 1):
        text += f"{i}. {row['name']} ‚Äî {row['best_score']} –ø–æ–ø—ã—Ç–æ–∫\n"

    bot.reply_to(message, text, parse_mode="Markdown")

# =======================
# üåê –í–ï–ë-–°–ï–†–í–ï–† (—á—Ç–æ–±—ã Render –Ω–µ —Ä—É–≥–∞–ª—Å—è)
# =======================

app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ Telegram Bot with PostgreSQL is running! Port is open.", 200

@app.route('/health')
def health():
    return {"status": "ok", "message": "Game bot with DB is alive"}, 200

# =======================
# üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê –í –û–¢–î–ï–õ–¨–ù–û–ú –ü–û–¢–û–ö–ï
# =======================

def run_bot():
    time.sleep(10)  # –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    try:
        bot.infinity_polling(timeout=10, long_polling_timeout=5, skip_pending=True)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")

# =======================
# üìä –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# =======================

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# =======================
# ‚ñ∂Ô∏è –ó–ê–ü–£–°–ö
# =======================

if __name__ == '__main__':
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.daemon = True
    bot_thread.start()

    PORT = int(os.environ.get('PORT', 5000))
    logging.info(f"üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}...")
    app.run(host='0.0.0.0', port=PORT)
