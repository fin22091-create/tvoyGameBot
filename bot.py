import telebot
import os
import threading
import random
import psycopg2
from psycopg2.extras import RealDictCursor
from flask import Flask
from telebot import types
import logging
import sys
from datetime import datetime, timedelta

# =======================
# üö® –ü–†–û–í–ï–†–ö–ê –ó–ê–ü–£–°–ö–ê
# =======================
print("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...", file=sys.stderr)

# =======================
# üîß –ù–ê–°–¢–†–û–ô–ö–ò
# =======================
TOKEN = os.getenv('BOT_TOKEN')
if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Environment Variables –Ω–∞ Render.")
DATABASE_URL = os.getenv('DATABASE_URL')
if not DATABASE_URL:
    raise ValueError("‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

bot = telebot.TeleBot(TOKEN, threaded=False)  # ‚Üê –í–∞–∂–Ω–æ: threaded=False

# –•—Ä–∞–Ω–∏–º –∏–≥—Ä—É –ø–æ user_id (–≤–º–µ—Å—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö!)
user_games = {}  # {user_id: {'number': 42, 'attempts': 3}}

# =======================
# üóÉÔ∏è –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•
# =======================
def init_db():
    try:
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                name TEXT,
                best_score INTEGER DEFAULT 0
            )
        ''')
        conn.commit()
        cursor.close()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞", file=sys.stderr)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}", file=sys.stderr)
        raise

# =======================
# üíæ –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô
# =======================
def save_user(user_id, name):
    try:
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO users (user_id, name, best_score)
            VALUES (%s, %s, COALESCE((SELECT best_score FROM users WHERE user_id = %s), 0))
            ON CONFLICT (user_id) DO UPDATE SET name = EXCLUDED.name
        ''', (user_id, name, user_id))
        conn.commit()
        cursor.close()
        conn.close()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", file=sys.stderr)

def update_score(user_id, attempts):
    try:
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()
        cursor.execute('SELECT best_score FROM users WHERE user_id = %s', (user_id,))
        result = cursor.fetchone()
        current_best = result[0] if result and result[0] > 0 else None
        if not current_best or attempts < current_best:
            cursor.execute('UPDATE users SET best_score = %s WHERE user_id = %s', (attempts, user_id))
        conn.commit()
        cursor.close()
        conn.close()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–∞: {e}", file=sys.stderr)

def get_user_score(user_id):
    try:
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()
        cursor.execute('SELECT best_score FROM users WHERE user_id = %s', (user_id,))
        result = cursor.fetchone()
        cursor.close()
        conn.close()
        return result[0] if result else None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á—ë—Ç–∞: {e}", file=sys.stderr)
        return None

def get_top_players(limit=10):
    try:
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        cursor.execute('''
            SELECT name, best_score
            FROM users
            WHERE best_score > 0
            ORDER BY best_score ASC
            LIMIT %s
        ''', (limit,))
        results = cursor.fetchall()
        cursor.close()
        conn.close()
        return results
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞: {e}", file=sys.stderr)
        return []

# =======================
# ü§ñ –õ–û–ì–ò–ö–ê –ë–û–¢–ê
# =======================
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    name = message.from_user.first_name
    save_user(user_id, name)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    btn1 = types.KeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
    btn2 = types.KeyboardButton("üèÜ –ú–æ–π —Å—á—ë—Ç")
    btn3 = types.KeyboardButton("üèÖ –¢–æ–ø-10")
    markup.add(btn1, btn2, btn3)
    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø –∑–∞–≥–∞–¥–∞—é —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100 ‚Äî –ø–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!\n–ñ–º–∏ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'.",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == "üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
def start_game(message):
    user_id = message.from_user.id
    secret_number = random.randint(1, 100)
    user_games[user_id] = {'number': secret_number, 'attempts': 0}
    bot.send_message(message.chat.id, "–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ö–∞–∫–æ–µ —á–∏—Å–ª–æ?")
    bot.register_next_step_handler(message, guess_number)

def guess_number(message):
    user_id = message.from_user.id
    if user_id not in user_games:
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏–≥—Ä—É!")
        return

    try:
        guess = int(message.text)
    except ValueError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ!")
        bot.register_next_step_handler(message, guess_number)
        return

    game = user_games[user_id]
    game['attempts'] += 1

    if guess < game['number']:
        bot.reply_to(message, "–ë–æ–ª—å—à–µ! üìà")
        bot.register_next_step_handler(message, guess_number)
    elif guess > game['number']:
        bot.reply_to(message, "–ú–µ–Ω—å—à–µ! üìâ")
        bot.register_next_step_handler(message, guess_number)
    else:
        bot.reply_to(message, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª –∑–∞ {game['attempts']} –ø–æ–ø—ã—Ç–æ–∫!")
        update_score(user_id, game['attempts'])
        user_games.pop(user_id, None)  # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        btn1 = types.KeyboardButton("üéÆ –°—ã–≥—Ä–∞—Ç—å –µ—â—ë")
        btn2 = types.KeyboardButton("üèÜ –ú–æ–π —Å—á—ë—Ç")
        btn3 = types.KeyboardButton("üèÖ –¢–æ–ø-10")
        markup.add(btn1, btn2, btn3)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üèÜ –ú–æ–π —Å—á—ë—Ç")
def show_score(message):
    user_id = message.from_user.id
    score = get_user_score(user_id)
    if score and score > 0:
        bot.reply_to(message, f"üèÜ –¢–≤–æ–π –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –ø–æ–ø—ã—Ç–æ–∫")
    else:
        bot.reply_to(message, "–¢—ã –µ—â—ë –Ω–µ —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ. –ù–∞–∂–º–∏ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'!")

@bot.message_handler(func=lambda message: message.text == "üéÆ –°—ã–≥—Ä–∞—Ç—å –µ—â—ë")
def play_again(message):
    start_game(message)

@bot.message_handler(commands=['top'])
@bot.message_handler(func=lambda message: message.text == "üèÖ –¢–æ–ø-10")
def show_top_players(message):
    results = get_top_players(10)
    if not results:
        bot.reply_to(message, "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ—Ä–¥–æ–≤. –°—ã–≥—Ä–∞–π –∏ —É—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤–æ–π!")
        return
    text = "üèÜ *–¢–û–ü-10 –õ–£–ß–®–ò–• –ò–ì–†–û–ö–û–í*\n"
    for i, row in enumerate(results, 1):
        text += f"{i}. {row['name']} ‚Äî {row['best_score']} –ø–æ–ø—ã—Ç–æ–∫\n"
    bot.reply_to(message, text, parse_mode="Markdown")

# =======================
# üåê –í–ï–ë-–°–ï–†–í–ï–† (–¥–ª—è Render)
# =======================
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ Telegram Bot is running!", 200

@app.route('/health')
def health():
    return {"status": "ok", "message": "Bot is alive"}, 200

# =======================
# üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê –í –û–¢–î–ï–õ–¨–ù–û–ú –ü–û–¢–û–ö–ï
# =======================
def run_bot():
    try:
        print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...", file=sys.stderr)
        bot.infinity_polling(skip_pending=True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}", file=sys.stderr)

# =======================
# ‚ñ∂Ô∏è –ó–ê–ü–£–°–ö
# =======================
if __name__ == '__main__':
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...", file=sys.stderr)
    init_db()
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.daemon = True
    bot_thread.start()
    PORT = int(os.environ.get('PORT', 5000))
    print(f"üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}...", file=sys.stderr)
    app.run(host='0.0.0.0', port=PORT)